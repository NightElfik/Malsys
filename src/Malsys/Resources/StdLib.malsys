/**
 * Malsys standard library.
 */

//------------------------------------------------------------------------------
// Constants.
//------------------------------------------------------------------------------

let pi = 3.14159265358979323846;
let Pi = pi;
let π = pi;

let tau = 2 * pi;
let Tau = tau;
let τ = tau;

let piHalf = pi / 2;
let PiHalf = piHalf;
let pi_half = piHalf;

let e = 2.7182818284590452354;
let E = e;

let goldenRatio = (1 + sqrt(5)) / 2;
let GoldenRatio = goldenRatio;
let golden_ratio = goldenRatio;


//------------------------------------------------------------------------------
// Process configurations.
//------------------------------------------------------------------------------

configuration SymbolPrinter {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container SymbolProcessor typeof ISymbolProcessor default SymbolsSaver;

	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect RandomGeneratorProvider to Rewriter.RandomGeneratorProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect SymbolProcessor to Iterator.OutputProcessor;

}

configuration SvgRenderer {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default Interpreter2D;
	container Renderer typeof IRenderer default SvgRenderer2D;

	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect RandomGeneratorProvider to Rewriter.RandomGeneratorProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect Interpreter to InterpreterCaller.Interpreter;
	connect Renderer to Interpreter.Renderer;

}

configuration HexAsciiRenderer {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default HexaAsciiInterpreter;
	container Renderer typeof IRenderer default TextRenderer;

	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect RandomGeneratorProvider to Rewriter.RandomGeneratorProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect Interpreter to InterpreterCaller.Interpreter;
	connect Renderer to Interpreter.Renderer;

}

configuration ThreeJsRenderer {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default Interpreter3D;
	container Renderer typeof IRenderer default ThreeJsSceneRenderer3D;

	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect RandomGeneratorProvider to Rewriter.RandomGeneratorProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect Interpreter to InterpreterCaller.Interpreter;
	connect Renderer to Interpreter.Renderer;

}

configuration InterpretationDebugger {

	component AxiomProvider typeof AxiomProvider;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCallerDebugger;

	connect AxiomProvider to Iterator.AxiomProvider;
	connect AxiomProvider to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;

}


// default process
process with SymbolPrinter;


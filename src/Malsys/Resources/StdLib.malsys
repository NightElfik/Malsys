//==============================================================================
// Malsys standard library.
//==============================================================================

//------------------------------------------------------------------------------
// Constants.
//------------------------------------------------------------------------------

let pi = 3.14159265358979323846;
let π = pi;

let e = 2.7182818284590452354;


//------------------------------------------------------------------------------
// Abstract L-systems (for inherence).
//------------------------------------------------------------------------------

abstract lsystem StdLsystem {

	interpret A B C D E F G as DrawForward(8);
	interpret a b c d e f g as MoveForward(8);

	interpret + as TurnLeft(90);
	interpret -(x = 90) as TurnLeft(-x);
	interpret | as TurnLeft(180);
	interpret / as Roll(180);  // switches meaning of + and - symbols

	interpret < as StartPolygon;
	interpret . as RecordPolygonVertex;
	interpret > as EndPolygon;


	set symbols startBranchSymbols = [;
	set symbols endBranchSymbols = ];

	interpret [ as StartBranch;
	interpret ] as EndBranch;

}

abstract lsystem StdLsystem3D {

	interpret A B C D E F G as DrawForward(8);
	interpret a b c d e f g as MoveForward(8);

	interpret + as Yaw(90);
	interpret -(x = 90) as Yaw(-x);

	interpret ^ as Pitch(90);
	interpret &(x = 90) as Pitch(-x);

	interpret / as Roll(90);
	interpret \(x = 90) as Roll(-x);

	interpret < as StartPolygon;
	interpret . as RecordPolygonVertex;
	interpret > as EndPolygon;


	set symbols startBranchSymbols = [;
	set symbols endBranchSymbols = ];

	interpret [ as StartBranch;
	interpret ] as EndBranch;


}


abstract lsystem Branches {

	// to allow rewriter recognize branches and check context correctly
	set symbols startBranchSymbols = [;
	set symbols endBranchSymbols = ];

	interpret [ as StartBranch;
	interpret ] as EndBranch;

}


//------------------------------------------------------------------------------
// Process configurations.
//------------------------------------------------------------------------------

configuration SymbolPrinter {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container SymbolProcessor typeof ISymbolProcessor default SymbolsSaver;

	connect RandomGeneratorProvider to Iterator.RandomGeneratorProvider;
	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect SymbolProcessor to Iterator.OutputProcessor;

}

configuration SvgRenderer {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;
	component LsystemInLsystemProcessor typeof LsystemInLsystemProcessor;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default TurtleInterpreter;
	container Renderer typeof IRenderer default SvgRenderer2D;

	connect RandomGeneratorProvider to Iterator.RandomGeneratorProvider;
	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect Interpreter to InterpreterCaller.Interpreter;
	connect Interpreter to LsystemInLsystemProcessor.Interpreter;
	connect LsystemInLsystemProcessor to InterpreterCaller.LsystemInLsystemProcessor;
	connect Renderer to Interpreter.Renderer;

}

configuration HexAsciiRenderer {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;
	component LsystemInLsystemProcessor typeof LsystemInLsystemProcessor;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default HexaAsciiInterpreter;
	container Renderer typeof IRenderer default TextRenderer;

	connect RandomGeneratorProvider to Iterator.RandomGeneratorProvider;
	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect Interpreter to InterpreterCaller.Interpreter;
	connect Interpreter to LsystemInLsystemProcessor.Interpreter;
	connect LsystemInLsystemProcessor to InterpreterCaller.LsystemInLsystemProcessor;
	connect Renderer to Interpreter.Renderer;

}

configuration ThreeJsRenderer {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;
	component LsystemInLsystemProcessor typeof LsystemInLsystemProcessor;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default TurtleInterpreter;
	container Renderer typeof IRenderer default ThreeJsSceneRenderer3D;

	connect RandomGeneratorProvider to Iterator.RandomGeneratorProvider;
	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect Interpreter to InterpreterCaller.Interpreter;
	connect Interpreter to LsystemInLsystemProcessor.Interpreter;
	connect LsystemInLsystemProcessor to InterpreterCaller.LsystemInLsystemProcessor;
	connect Renderer to Interpreter.Renderer;

}

configuration InterpretationDebugger {

	component AxiomProvider typeof AxiomProvider;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCallerDebugger;

	connect AxiomProvider to Iterator.AxiomProvider;
	connect AxiomProvider to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;

}

/**
 * Special process configuration for processing inner L-systems.
 */
configuration InnerLsystemConfig {

	component Rewriter typeof SymbolRewriter;
	component Iterator typeof InnerLsystemIterator;
	component InterpreterCaller typeof InterpreterCaller;

	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;

	virtual connect Interpreter to InterpreterCaller.Interpreter;
	virtual connect LsystemInLsystemProcessor to InterpreterCaller.LsystemInLsystemProcessor;

}


/**
 * Dummy L-system for processing ConstantDumper;
 */
abstract lsystem Constants { }

configuration ConstantDumper {

	component Dumper typeof ConstantsDumper;

}


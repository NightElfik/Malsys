//==============================================================================
// Malsys standard library.
// Copyright © 2012 Marek Fišer
// All rights reserved.
//==============================================================================

//------------------------------------------------------------------------------
// General Constants.
//------------------------------------------------------------------------------

let pi = 3.14159265358979323846;
let π = pi;  // Malsys supports Unicode! Yay!

let e = 2.7182818284590452354;


//------------------------------------------------------------------------------
// Malsys specific constants.
//------------------------------------------------------------------------------

// line cap values of SvgRenderer2D.LineCap property.
let none = 0;
let square = 1;
let round = 2;

// Polygon triangulation strategies of
// ThreeJsSceneRenderer3D.PolygonTriangulationStrategy property.
let fanFromFirstPoint = 0;
let minAngle = 1;
let maxAngle = 2;
let maxDistance = 3;
let maxDistanceFromNonTriangulated = 4;


//------------------------------------------------------------------------------
// Abstract L-systems (for inheritance).
//------------------------------------------------------------------------------

/**
 * Basic L-system with usual interpretations and correctly set branches.
 */
abstract lsystem StdLsystem {

	interpret A B C D E F G as DrawForward(8);
	interpret a b c d e f g as MoveForward(8);

	interpret + as TurnLeft(90);
	interpret -(x = 90) as TurnLeft(-x);
	interpret | as TurnLeft(180);
	interpret / as Roll(180);  // switches meaning of + and - symbols

	interpret < as StartPolygon;
	interpret . as RecordPolygonVertex;
	interpret > as EndPolygon;


	set symbols startBranchSymbols = [;
	set symbols endBranchSymbols = ];

	interpret [ as StartBranch;
	interpret ] as EndBranch;

}

/**
 * Basic 3D L-system with usual interpretations and correctly set branches.
 * Main difference between this and StdLsystem is in interpretation
 * of + and -. 2D Image must be in XY plane so + and - must do Pitch but in
 * 3D for pitch is better use ^ and & because it is more semantic.
 */
abstract lsystem StdLsystem3D {

	interpret A B C D E F G as DrawForward(8);
	interpret a b c d e f g as MoveForward(8);

	interpret + as Yaw(90);
	interpret -(x = 90) as Yaw(-x);

	interpret ^ as Pitch(90);
	interpret &(x = 90) as Pitch(-x);

	interpret / as Roll(90);
	interpret \(x = 90) as Roll(-x);


	interpret < as StartPolygon;
	interpret . as RecordPolygonVertex;
	interpret > as EndPolygon;


	set symbols startBranchSymbols = [;
	set symbols endBranchSymbols = ];

	interpret [ as StartBranch;
	interpret ] as EndBranch;


}

/**
 * Just correctly set branches.
 */
abstract lsystem Branches {

	// to allow rewriter recognize branches and check context correctly
	set symbols startBranchSymbols = [;
	set symbols endBranchSymbols = ];

	interpret [ as StartBranch;
	interpret ] as EndBranch;

}

/**
 * Just correctly set branches and polygons.
 */
abstract lsystem Polygons {

	interpret < as StartPolygon;
	interpret . as RecordPolygonVertex;
	interpret > as EndPolygon;


	set symbols startBranchSymbols = [;
	set symbols endBranchSymbols = ];

	interpret [ as StartBranch;
	interpret ] as EndBranch;

}


//------------------------------------------------------------------------------
// Process configurations.
//------------------------------------------------------------------------------

/**
 * Prints symbols to string.
 */
configuration SymbolPrinter {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container SymbolProcessor typeof ISymbolProcessor default SymbolsSaver;

	connect RandomGeneratorProvider to Iterator.RandomGeneratorProvider;
	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect SymbolProcessor to Iterator.OutputProcessor;

}

/**
 * Renders symbols as SVG vector image.
 */
configuration SvgRenderer {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;
	component LsystemInLsystemProcessor typeof LsystemInLsystemProcessor;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default TurtleInterpreter;
	container Renderer typeof IRenderer default SvgRenderer2D;

	connect RandomGeneratorProvider to Iterator.RandomGeneratorProvider;
	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect LsystemInLsystemProcessor to InterpreterCaller.LsystemInLsystemProcessor;
	connect Renderer to Interpreter.Renderer;

}

/**
 * Renders symbols as lines from ASCII characters in hexagonal grid.
 */
configuration HexAsciiRenderer {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;
	component LsystemInLsystemProcessor typeof LsystemInLsystemProcessor;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default HexaAsciiInterpreter;
	container Renderer typeof IRenderer default TextRenderer;

	connect RandomGeneratorProvider to Iterator.RandomGeneratorProvider;
	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect LsystemInLsystemProcessor to InterpreterCaller.LsystemInLsystemProcessor;
	connect Renderer to Interpreter.Renderer;

}

/**
 * Renders symbols as 3D scene for Three.js engine.
 */
configuration ThreeJsRenderer {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;
	component LsystemInLsystemProcessor typeof LsystemInLsystemProcessor;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default TurtleInterpreter;
	container Renderer typeof IRenderer default ThreeJsSceneRenderer3D;

	connect RandomGeneratorProvider to Iterator.RandomGeneratorProvider;
	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect LsystemInLsystemProcessor to InterpreterCaller.LsystemInLsystemProcessor;
	connect Renderer to Interpreter.Renderer;

}

/**
 * Exports 3D model to OBJ file format.
 */
configuration ObjExporter {

	component AxiomProvider typeof AxiomProvider;
	component RandomGeneratorProvider typeof RandomGeneratorProvider;
	component LsystemInLsystemProcessor typeof LsystemInLsystemProcessor;

	container Rewriter typeof IRewriter default SymbolRewriter;
	container Iterator typeof IIterator default MemoryBufferedIterator;
	container InterpreterCaller typeof IInterpreterCaller default InterpreterCaller;
	container Interpreter typeof IInterpreter default TurtleInterpreter;
	container Renderer typeof IRenderer default ObjExporter3D;

	connect RandomGeneratorProvider to Iterator.RandomGeneratorProvider;
	connect AxiomProvider to Iterator.AxiomProvider;
	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;
	connect LsystemInLsystemProcessor to InterpreterCaller.LsystemInLsystemProcessor;
	connect Renderer to Interpreter.Renderer;

}

/**
 * Special process configuration for processing inner L-systems.
 */
configuration InnerLsystemConfig {

	component Rewriter typeof SymbolRewriter;
	component Iterator typeof InnerLsystemIterator;
	component InterpreterCaller typeof InterpreterCaller;

	connect Iterator to Rewriter.SymbolProvider;
	connect Rewriter to Iterator.SymbolProvider;
	connect InterpreterCaller to Iterator.OutputProcessor;

	// this connection is virtual because LsystemInLsystemProcessor component
	// will be added to process configuration from main process configuration
	virtual connect __this__ to InterpreterCaller.LsystemInLsystemProcessor;

}


/**
 * Dummy L-system for processing ConstantDumper.
 * Usage: process Constants with ConstantDumper;
 */
abstract lsystem Constants { }

configuration ConstantDumper {

	component Dumper typeof ConstantsDumper;

}


@model Malsys.Processing.Output.OutputFile

@using Malsys
@using Malsys.Processing

@{
var fi = new FileInfo(Model.FilePath);
if (!fi.Exists) {
	return;
}

<p>
	<b>@Model.Name</b> (by <abbr title="@Model.SourceType.FullName">@Model.SourceType.Name</abbr>)
	@Html.ActionLink(string.Format("download [{0}]", Malsys.DataSizeHelper.ToOptimalUnitString(fi.Length)),
		MVC.ProcessOutput.Download(fi.Name))
</p>


switch (Model.MimeType) {

	case MimeType.Text_Plain:
		using (var sr = fi.OpenText()) {
			bool asciiArt = Model.AdditionalData.ContainsValue(CommonAdditionalDataKeys.OutputIsAsciiArt, true);
			int readChars = 1000;
			if (asciiArt) {
				readChars *= 4;
			}
			var buff = new char[readChars + 1];
			int readed = sr.ReadBlock(buff, 0, buff.Length);
			string strOut = new string(buff, 0, Math.Min(readed, readChars));

			if (readed > readChars) {
				<p class="outputTruncated">(showing first @readChars characters)</p>
			}

			<pre class="box @(asciiArt ? "asciiArt" : "")">@strOut</pre>
		}
		break;

	case MimeType.Image_SvgXml:
		if (fi.Length > 1024 * 512) {
			<p class="outputTruncated">SVG image is not shown directly (it is greater than 0.5 MB). Please download the file to see the result.</p>
		}
		else {
			<div class="scrollBox">
				<img src="@Url.Action(MVC.ProcessOutput.Show(fi.Name))" alt="Process result" />
			</div>
		}
		break;

	default:
		<p class="outputTruncated">Unknown output type. Please download the file to see the result.</p>
		break;
}

}
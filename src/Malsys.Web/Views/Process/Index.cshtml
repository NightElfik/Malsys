@**
 * Copyright © 2012 Marek Fišer [malsys@marekfiser.cz]
 * All rights reserved.
 *@
@model ProcessLsystemResultModel

@{
	ViewBag.Title = "Malsys L-system processor";
	ViewBag.MainClass = "twoColumns";
}


<h2>L-system processor</h2>

@if (Model.SavedInputUrlId != null) {
	<p>
		Your input was saved under ID `@Model.SavedInputUrlId`.
		You can share it by URL @Html.InputPermaLink(Model.SavedInputUrlId)
			or you can @Html.ActionLink("publish it", MVC.Gallery.Edit(Model.SavedInputUrlId)) to public gallery!
	</p>
}

@if (Model.NoProcessStatement) {
	<p class="errorBlock">
		No process statements found.
		Please look at the help to learn how to write process statements or use one from list below (put it at the very end of the input).
	</p>
	<ul>
		<li><code>process all with SymbolPrinter;</code></li>
		<li><code>process all with SvgRenderer;</code></li>
		<li><code>process all with HexAsciiRenderer;</code></li>
		<li><code>process all with ThreeJsRenderer;</code></li>
	</ul>
}

@if (Model.CompiledSourceCode != null) {
	if (Model.Logger.ErrorOccurred) {
		<p class="errorBlock">
			Compilation was not successful.
		</p>
	}
	else {
		<p class="okBlock">
			Compilation was successful.
			See compiled source code at the end of page.
		</p>
	}
}

@if (Model.OutputFiles != null && Model.OutputFiles.Count > 0) {
	<p>
		Processing of input created @Model.OutputFiles.Count result(s) in @Math.Round(Model.ProcessDuration.TotalSeconds, 2) second(s).
		See them below.
	</p>
}
else {
	<p>
		Processing took @Math.Round(Model.ProcessDuration.TotalSeconds, 2) second(s).
	</p>
}

@if (Model.Logger != null && Model.Logger.Count > 0) {
	<table class="w100">
	<tr>
		<th style="width: 24px;"></th>
		<th>Message</th>
		<th style="width: 160px;">Position</th>
	</tr>
@foreach (var msgGroup in Model.Logger.GroupBy(x => x.MessageStr)) {
	var count = msgGroup.Count();
	var messages = msgGroup.Aggregate(new System.Text.StringBuilder(), (sb, m) => sb.AppendLine(m.GetFullMessage())).ToString();
	var msg = msgGroup.First();
	<tr class="@msg.Type.ToString().ToLower()">
		<td class="center"><abbr title="@msg.Type (@msg.Id)">@msg.Type.ToString()[0]</abbr></td>
		<td>
			@if (count > 1) {
				<p class="malsysMsg"><abbr title="@messages">[@(count)x]</abbr> @MalsysHelper.SimplifyMessage(msg.MessageStr)</p>
   }
   else {
				<p class="malsysMsg">@MalsysHelper.SimplifyMessage(msg.MessageStr)</p>
   }
		</td>
		<td>
			@if (!msg.Position.IsUnknown) {
				@:ln: @msg.Position.BeginLine
				@:col: @msg.Position.BeginColumn
			}
		</td>
	</tr>
}
	</table>
	<hr />
}

<div class="floating_container clearfix">

<div class="floating_box">
@using (Html.BeginForm(MVC.Process.Index())) {
	<fieldset class="malsysSource">
		<legend>Source code</legend>

		@Html.ValidationSummary(true)

		@Html.TextAreaFor(m => m.SourceCode, 20, 60, null)

		@* @Html.HiddenFor(m => m.ReferenceId) inserts old value from POST instead of updated value from model *@
		<input id="ReferenceId" name="ReferenceId" type="hidden" value="@Model.ReferenceId" />

		<p>
			<input type="submit" name="Process" value="Process & display results" />
			<input type="submit" name="Compile" value="Try to compile" />
			<input type="submit" name="Save" value="Save & get permanent link" />
		</p>
	</fieldset>
}
</div>

@{
	bool loadThreeJs = false;
	if (Model.OutputFiles != null) {
		foreach (var result in Model.OutputFiles) {
			if (result.MimeType == Malsys.MimeType.Application.Javascript) {
				// TODO: this should be returned from partial view somehow
				// the condition is on two places => place for mistakes
				loadThreeJs = true;
			}
			<div class="floating_box">
			@Html.Partial(MVC.Process.Views.OutputPartial, result)
			</div>
		}
	}
}

@if (Model.CompiledSourceCode != null) {
	<div class="floating_box">
		<h3>Compiled source code</h3>
		<pre class="malsys box">
		@Model.CompiledSourceCode
		</pre>
	</div>
}

</div>

@section scripts {
	@Content.Js(Links.Js.jquery_textarea_js)
	<script type="text/javascript">jQuery(document).ready(function () { $("#SourceCode").tabby() })</script>

	@if (loadThreeJs) {
		@Content.Js(Links.Js.ThreeJs.Three_js)
		@Content.Js(Links.Js.ThreeJs.Detector_js)
		@Content.Js(Links.Js.ThreeJs.Stats_js)
		@Content.Js(Links.Js.ThreeJs.malsys_three_js)
	}
}
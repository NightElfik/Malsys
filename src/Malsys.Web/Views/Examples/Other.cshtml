@{
	ViewBag.Title = "Other";
	ViewBag.MainClass = "twoColumns";
}

<h2>Other</h2>

<div class="floating_container clearfix">

<div class="floating_box">
<pre class="malsys box">
/**
 * http://en.wikipedia.org/wiki/Pythagoras_tree_(fractal)
 */
lsystem PythagorasTree {

	let iterations = 6;
	set axiom = F(100);
	let initialAngle = 90;
	let color = {0,0,0}; // black

	// angle should be between 0 and 90 (exclusive)
	let angle = 40;
	let angleComp = 90 - angle;  // complement
	let sinAngle = sin(deg2rad(angle));
	let sinAngleComp = sin(deg2rad(angleComp));

	interpret E(x) as DrawLine(x, x, color);
	interpret m as MoveForward;
	interpret + as TurnLeft(angle);
	interpret - as TurnLeft(-angleComp);
	interpret [ as StartBranch;
	interpret ] as EndBranch;

	rewrite F(x)
		with left = x * sinAngle, right = x * sinAngleComp
		to E(x) [ + m(left / 2) F(right) ] - m(right / 2) F(left);

	process with SvgRenderer;

}
</pre>
</div>

<div class="floating_box">
<pre class="malsys box">
/**
 * William McWorter
 */
lsystem XBorder {

	let iterations = 3;
	set axiom =
		X Y X Y X Y X +
		X Y X Y X Y X +
		X Y X Y X Y X +
		X Y X Y X Y X;

	interpret F as DrawLine(4);
	interpret + as TurnLeft(90);
	interpret - as TurnLeft(-90);

	rewrite F to nothing;
	rewrite X to F X + F X + F X F Y - F Y -;
	rewrite Y to + F X + F X F Y - F Y - F Y;

	process with SvgRenderer;

}
</pre>
</div>

<div class="floating_box">
<pre class="malsys box">
/**
 * http://en.wikipedia.org/wiki/Sierpinski_triangle
 */
lsystem SierpinskiTrangle {

	set axiom = F + F + F;
	let iterations = 6;
	// normalize line length (result image will have always same size)
	let lineLength = 2 ^ -iterations * 512;

	interpret F f as MoveForward(lineLength);
	interpret + as TurnLeft(120);
	interpret - as TurnLeft(-120);
	interpret < as StartPolygon(0, 0);
	interpret . as RecordPolygonVertex;
	interpret > as EndPolygon;

	rewrite F to < . F . + F . > + f + f F;
	rewrite f to f f;
	rewrite < to nothing;
	rewrite . to nothing;
	rewrite > to nothing;

	process with SvgRenderer;

}
</pre>
</div>

<div class="floating_box">
<pre class="malsys box">
/**
 * http://en.wikipedia.org/wiki/Sierpinski_triangle
 */
lsystem SierpinskiTrangle {

	set axiom = A;
	let iterations = 6;

	interpret A B as DrawLine(8);
	interpret + as TurnLeft(60);
	interpret - as TurnLeft(-60);

	rewrite A to B - A - B;
	rewrite B to A + B + A;

	process with SvgRenderer;

}
</pre>
</div>

<div class="floating_box">
<pre class="malsys box">
/**
 * Accidentally created while building Sierpinski Trangle.
 * Marek Fišer
 */
lsystem BrokenSierpinski {

	set axiom = F + F + F;
	let iterations = 6;
	let lineLength = 2 ^ -iterations * 1024;
	let continousColoring = true;

	interpret F f as MoveForward(lineLength);
	interpret + as TurnLeft(120);
	interpret - as TurnLeft(-120);
	interpret < as StartPolygon(0, 0);
	interpret . as RecordPolygonVertex;
	interpret > as EndPolygon;

	rewrite F to < . F . + F . > + f + f F;
	rewrite < to nothing;
	rewrite . to nothing;
	rewrite > to nothing;

	process with SvgRenderer;

}
</pre>
</div>

<div class="floating_box">
<pre class="malsys box">
/**
 * http://en.wikipedia.org/wiki/Sierpinski_triangle
 */
lsystem InverseSierpinski {

	set axiom = < . F - . F . > - F;
	let iterations = 5;
	// normalize line length (result image will have always same size)
	let lineLength = 2 ^ -iterations * 256;

	interpret F f as MoveForward(lineLength);
	interpret + as TurnLeft(120);
	interpret - as TurnLeft(-120);
	interpret < as StartPolygon(0, 0);
	interpret . as RecordPolygonVertex;
	interpret > as EndPolygon;

	rewrite F to f + < . F - . F . > - F + f;
	rewrite f to f f;

	process with SvgRenderer;

}
</pre>
</div>

<div class="floating_box">
<pre class="malsys box">
/**
 * McWorter's Pentigree
 */
lsystem Pentigree {

	set axiom = F;
	let iterations = 4;

	interpret F as DrawLine(8);
	interpret + as TurnLeft(36);
	interpret - as TurnLeft(-36);

	rewrite F to + F + + F - - - - F - - F + + F + + F -;

	process with SvgRenderer;

}
</pre>
</div>

<div class="floating_box">
<pre class="malsys box">
/**
 * McWorter's Pentigree
 */
lsystem PentigreeFiveTimes {

	set axiom = F + + F + + F + + F + + F;
	let iterations = 4;
	let continousColoring = true;

	interpret F as DrawLine(6);
	interpret + as TurnLeft(36);
	interpret - as TurnLeft(-36);

	rewrite F to + F + + F - - - - F - - F + + F + + F -;

	process with SvgRenderer;

}
</pre>
</div>


</div>
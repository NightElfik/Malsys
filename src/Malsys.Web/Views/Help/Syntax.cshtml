@{
	ViewBag.Title = "Malsys syntax";
}

@section scripts {
	@Content.Script("Highlight.js", Url);
}

<h2>Malsys syntax</h2>

<h4 id="grammar-input">Input</h4>

<pre class="grammar">
input = input_statement*

input_statement =
	| empty_statement
	| constant_def
	| function_def
	| lsystem_def
</pre>


<h4 id="grammar-empty_statement">Empty statement</h4>

<pre class="grammar">
empty_statement = ';'
</pre>


<h4 id="grammar-constant_def">Constant definition</h4>

<pre class="grammar">
constant_def = 'let' id '=' expression ';'
</pre>

<pre class="malsys">
let x = sqrt(2) + 1;
</pre>


<h4 id="grammar-function_def">Function definition</h4>

<pre class="grammar">
function_def = 'fun' id '(' params_list? ')' '{' constant_def* 'return' expression ';' '}'

params_list = id ('=' expression)?  (',' params_list)?
</pre>

<pre class="malsys">
fun addSquares(x, y) {
	return x * x + y * y;
}
</pre>

<h4 id="grammar-lsystem_def">L-system definition</h4>

<pre class="grammar">
lsystem_def = 'lsystem' id ('(' params_list? ')')? '{' lsystem_statement* '}'

params_list = id ('=' expression)?  (',' params_list)?
</pre>


<h4 id="grammar-lsystem_statement">L-system statement</h4>

<pre class="grammar">
lsystem_statement =
	| empty_statement
	| constant_def
	| function_def
	| symbols_list_def
	| symbols_interpretation_def
	| rewrite_rule
</pre>


<h4 id="grammar-symbols_list_def">Symbols list definition</h4>

<pre class="grammar">
symbols_list_def = 'set' id '=' symbol ';'
</pre>


<h4 id="grammar-symbols_interpretation_def">Symbols interpretation definition</h4>

<pre class="grammar">
symbols_interpretation_def = 'interpret' symbol_no_params+ 'as' id ('(' params_expr_list? ')')? ';'

params_expr_list = expression  (',' params_expr_list)?
</pre>


<h4 id="grammar-rewrite_rule">Rewrite rule</h4>

<pre class="grammar">
rewrite_rule = 'rewrite' rr_pattern rr_consts? rr_condition? 'to' (rr_replacements | 'nothing') ';'
</pre>


<h5 id="grammar-rr_pattern">Rewrite rule pattern</h5>

<pre class="grammar">
rr_pattern = rr_context? symbol_pattern ('(' params_pattern_list? ')')? rr_context?

params_pattern_list = symbol_pattern  (',' params_pattern_list)?

rr_context = '{' symbol_pattern* '}'
</pre>


<h5 id="grammar-rr_consts">Rewrite rule constants definition</h5>

<pre class="grammar">
rr_consts = 'with' rr_cost_defs_list?

rr_cost_defs_list = id '=' expression  (',' rr_cost_defs_list)?
</pre>

Definition of local constants for rewrite rule.


<h5 id="grammar-rr_condition">Rewrite rule condition</h5>

<pre class="grammar">
rr_condition = 'where' expression
</pre>


<h5 id="grammar-rr_weight">Rewrite rule replacement</h5>

<pre class="grammar">
rr_replacements = symbol* rr_weight? ('or' 'to' rr_replacements)?

rr_weight = 'weight' expression
</pre>


<h4 id="grammar-symbol">L-system symbol</h4>

<pre class="grammar">
symbol = symbol_char+ '(' expr_args ')'

symbol_char = ALPHABETIC_CHAR | expr_operator | '[' | ']'

expr_args = expression (',' expr_args)?
</pre>


<h4 id="grammar-expression">Expression</h4>

<pre class="grammar">
expression = expr_member+

expr_member =
	| expr_number
	| id
	| expr_operator
	| expr_indexer
	| expr_function
	| '(' expression ')'

expr_number =
	| [0-9]+ ('.' [0-9]+)? (('e' | 'E') [0-9]+)?
	| '0b' [0-1]+
	| '0o' [0-7]+
	| '#' [0-9a-f]+
	| '0x' [0-9a-f]+

expr_indexer = '[' expression ']'

expr_function = id '(' params_expr_list? ')'

params_expr_list = expression (',' params_expr_list)?
</pre>


<h4 id="grammar-expr_operator">Expression operator</h4>

<pre class="grammar">
expr_operator = first_op_char op_char*

first_op_char = '!'|'$'|'%'|'&'|'*'|'+'|'.'|'\\'|'<'|'>'|'@@'|'^'|'|'|'~'|'?'|':'|'-'

op_char = first_op_char | '='|'/'
</pre>


<h4 id="grammar-id">Identificator</h4>

<pre class="grammar">
id = (ALPHABETIC_CHAR | '_') (ALPHABETIC_CHAR | DIGIT | ''')*
</pre>


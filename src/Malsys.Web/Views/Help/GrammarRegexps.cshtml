@{
	ViewBag.Title = "Regular expressions";
}

@section scripts {
	@Content.Script("GrammarHighlighter.js", Url)
}


<h2>What is regular expression</h2>

<p>
	Regular expression (or <i>regexp</i>) is a pattern which is describing some text.
	Regular expression is <i>matching</i> some text if the text is exactly described by the regular expression.
	More about regular expressions on @Html.Link("Wikipedia", "http://en.wikipedia.org/wiki/Regular_expression").
</p>

<p>
	Simplified regular expressions are used @Html.ActionLink("formal definition of L-system syntax", "Syntax") to describe the possible input (grammar).
	There are some differences between common regular expressions and regexps used in Malsys,
		so their syntax is described on this page, to avoid misunderstanding.
</p>

<p>
	If you are familiar with regular expressions, you can skip detailed explanation and look at @Html.Link("examples on the bottom of this page", "#examples").
</p>



<h3>Literals</h3>

<p>
	Regular expression that matches literal is very simple.
	It is just string in single quotes.
	For example <code class="grammar">'let'</code> matches string <code class="re-match">let</code>.
</p>



<h3>Character sets</h3>

<p>
	Set of allowed characters is described by list of individual characters in brackets.
	Regular expression <code class="grammar">[ab]</code> matches only <code class="re-match">a</code> or <code class="re-match">b</code>.
	So regual expression matching a digit can be written as <code class="grammar">[0123456789]</code>, but there is easier way to achieve this, using range.
</p>

<p>
	Set of consecutive characters can be described by range regular expression <code class="grammar">[s-e]</code>
		where <code class="re-match">s</code> is first character and <code class="re-match">e</code> is last character.
	Order of characters is same as in @Html.Link("ASCII table", "http://cs.wikipedia.org/wiki/ASCII").
</p>



<h3>Boolean OR operator</h3>

<p>
	Another useful thing is <i>OR</i> operator represented as vertical bar (<code class="grammar">|</code>) in regular expressions.
	For example <code class="grammar">'gray' | 'grey'</code> matches <code class="re-match">gray</code> or <code class="re-match">grey</code>.
</p>



<h3>Grouping and quantification</h3>

<p>
	Any part of regular expression can be grouped by parenthesis.
	Groups are used for quantify more than one element.
</p>

<p>
	A quantifier after a literal or group specifies how often that preceding element is allowed to occur.
	There are 3 different quantifiers: <b>?</b> (question mark), <b>+</b> (plus sign) and <b>*</b> (asterisk).
	Quantifier is applied on exactly one preceding element.
	To quantify more elements, they must be grouped to one element (group) which is quantified.
</p>

<p>
	The question mark indicates there is <i>zero or one</i> of the preceding element.
	In other words, element is optional.
	For example, <code class="grammar">'colo' 'u'? 'r'</code> matches both <code class="re-match">color</code> and <code class="re-match">colour</code>.
</p>

<p>
	The plus sign indicates there is <i>one or more</i> of the preceding element.
	It means that element is mandatory and moreover it can repeat indefinitely times.
	This quantifier is often used to match a number, <code class="grammar">[0-9]+</code> matches any non-negative integer,
		for example <code class="re-match">5</code> or <code class="re-match">42</code>.
</p>

<p>
	The asterisk indicates there is <i>zero or more</i> of the preceding element.
	It is combination of previous two quantifiers, because <code class="grammar">(expression)*</code>
		can be replaced with <code class="grammar">((expression)+)?</code>.
	Useful usage of asterisk can be regular expression, that matches non-empty comma-separated list of non-negative integers.
	<code class="grammar">[0-9]+ (',' [0-9]+)*</code> matches <code class="re-match">0</code>,
		<code class="re-match">127,721</code> or <code class="re-match">1,1,2,3,5,8</code>.
</p>

<p>
	Any of mentioned above can be combined together, so regular expression <code class="grammar">[0-9]+ ('.' [0-9]+)? ([eE] ('+'|'-')? [0-9]+)?</code>
	matches non-negative floating point number with optional fractional part and optional exponent.
</p>



<h3>Whitespaces</h3>

<p>
	Whitespaces are not significant unless they are as literal, but whitespace literals are not needed for ours purposes.
	This allows some formatting of regular expressions with whitespaces to made them more readable.
</p>



<h3 id="examples">Examples</h3>

<table>
	<tr>
		<th>Regular expression</th>
		<th>Matching string(s)</th>
		<th>Comment</th>
	</tr>
	<tr>
		<td><code class="grammar">'lsystem'</code></td>
		<td><code class="re-match">lsystem</code></td>
		<td></td>
	</tr>
	<tr>
		<td><code class="grammar">[0-9]</code></td>
		<td><code class="re-match">1</code>, <code class="re-match">8</code></td>
		<td>any one-digit integer</td>
	</tr>
	<tr>
		<td><code class="grammar">'$' | '%' | '&'</code></td>
		<td><code class="re-match">$</code>, <code class="re-match">%</code> or <code class="re-match">&</code></td>
		<td></td>
	</tr>
	<tr>
		<td><code class="grammar">'0' [xX] ([0-9] | [a-f] | [A-F])+</code></td>
		<td><code class="re-match">0xf8f</code>, <code class="re-match">0x12ab</code></td>
		<td>non-negative integer in case-insensitive hexadecimal format prefixed with <code class="re-match">0x</code></td>
	</tr>
	<tr>
		<td><code class="grammar">('+'|'-')? [0-9]+ ('.' [0-9]+)? ([eE] ('+'|'-')? [0-9]+)?</code></td>
		<td><code class="re-match">32</code>, <code class="re-match">3.14159</code>,
			<code class="re-match">-10e-5</code>, <code class="re-match">+2.121e+5</code></td>
		<td>floating point number with optional fractional part and optional exponent</td>
	</tr>
</table>

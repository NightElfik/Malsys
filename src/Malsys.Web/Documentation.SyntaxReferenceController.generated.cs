// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Malsys.Web.Areas.Documentation.Controllers
{
    public partial class SyntaxReferenceController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SyntaxReferenceController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SyntaxReferenceController Actions { get { return MVC.Documentation.SyntaxReference; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Documentation";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "SyntaxReference";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "SyntaxReference";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Tokens = "Tokens";
            public readonly string ConstantDefinition = "ConstantDefinition";
            public readonly string FunctionDefinition = "FunctionDefinition";
            public readonly string LsystemDefinition = "LsystemDefinition";
            public readonly string ComponentPropertyAssignDefinition = "ComponentPropertyAssignDefinition";
            public readonly string SymbolInterpretation = "SymbolInterpretation";
            public readonly string RewriteRule = "RewriteRule";
            public readonly string Grammar = "Grammar";
            public readonly string GrammarRegexps = "GrammarRegexps";
            public readonly string ComponentConfigurationDefinition = "ComponentConfigurationDefinition";
            public readonly string ProcessStatements = "ProcessStatements";
            public readonly string ArithmeticExpressions = "ArithmeticExpressions";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Tokens = "Tokens";
            public const string ConstantDefinition = "ConstantDefinition";
            public const string FunctionDefinition = "FunctionDefinition";
            public const string LsystemDefinition = "LsystemDefinition";
            public const string ComponentPropertyAssignDefinition = "ComponentPropertyAssignDefinition";
            public const string SymbolInterpretation = "SymbolInterpretation";
            public const string RewriteRule = "RewriteRule";
            public const string Grammar = "Grammar";
            public const string GrammarRegexps = "GrammarRegexps";
            public const string ComponentConfigurationDefinition = "ComponentConfigurationDefinition";
            public const string ProcessStatements = "ProcessStatements";
            public const string ArithmeticExpressions = "ArithmeticExpressions";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string ArithmeticExpressions = "ArithmeticExpressions";
                public readonly string ComponentConfigurationDefinition = "ComponentConfigurationDefinition";
                public readonly string ComponentPropertyAssignDefinition = "ComponentPropertyAssignDefinition";
                public readonly string ConstantDefinition = "ConstantDefinition";
                public readonly string FunctionDefinition = "FunctionDefinition";
                public readonly string LsystemDefinition = "LsystemDefinition";
                public readonly string ProcessStatements = "ProcessStatements";
                public readonly string RewriteRule = "RewriteRule";
                public readonly string SymbolInterpretation = "SymbolInterpretation";
                public readonly string Tokens = "Tokens";
            }
            public readonly string ArithmeticExpressions = "~/Areas/Documentation/Views/SyntaxReference/ArithmeticExpressions.cshtml";
            public readonly string ComponentConfigurationDefinition = "~/Areas/Documentation/Views/SyntaxReference/ComponentConfigurationDefinition.cshtml";
            public readonly string ComponentPropertyAssignDefinition = "~/Areas/Documentation/Views/SyntaxReference/ComponentPropertyAssignDefinition.cshtml";
            public readonly string ConstantDefinition = "~/Areas/Documentation/Views/SyntaxReference/ConstantDefinition.cshtml";
            public readonly string FunctionDefinition = "~/Areas/Documentation/Views/SyntaxReference/FunctionDefinition.cshtml";
            public readonly string LsystemDefinition = "~/Areas/Documentation/Views/SyntaxReference/LsystemDefinition.cshtml";
            public readonly string ProcessStatements = "~/Areas/Documentation/Views/SyntaxReference/ProcessStatements.cshtml";
            public readonly string RewriteRule = "~/Areas/Documentation/Views/SyntaxReference/RewriteRule.cshtml";
            public readonly string SymbolInterpretation = "~/Areas/Documentation/Views/SyntaxReference/SymbolInterpretation.cshtml";
            public readonly string Tokens = "~/Areas/Documentation/Views/SyntaxReference/Tokens.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_SyntaxReferenceController : Malsys.Web.Areas.Documentation.Controllers.SyntaxReferenceController
    {
        public T4MVC_SyntaxReferenceController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void TokensOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Tokens()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Tokens);
            TokensOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ConstantDefinitionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ConstantDefinition()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ConstantDefinition);
            ConstantDefinitionOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void FunctionDefinitionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult FunctionDefinition()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FunctionDefinition);
            FunctionDefinitionOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LsystemDefinitionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult LsystemDefinition()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LsystemDefinition);
            LsystemDefinitionOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ComponentPropertyAssignDefinitionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ComponentPropertyAssignDefinition()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentPropertyAssignDefinition);
            ComponentPropertyAssignDefinitionOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SymbolInterpretationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult SymbolInterpretation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SymbolInterpretation);
            SymbolInterpretationOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void RewriteRuleOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult RewriteRule()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RewriteRule);
            RewriteRuleOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void GrammarOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Grammar()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Grammar);
            GrammarOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void GrammarRegexpsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult GrammarRegexps()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GrammarRegexps);
            GrammarRegexpsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ComponentConfigurationDefinitionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ComponentConfigurationDefinition()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ComponentConfigurationDefinition);
            ComponentConfigurationDefinitionOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ProcessStatementsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProcessStatements()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProcessStatements);
            ProcessStatementsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ArithmeticExpressionsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ArithmeticExpressions()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ArithmeticExpressions);
            ArithmeticExpressionsOverride(callInfo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591

@model BasicInterpretationModel

@{
	ViewBag.Title = "Symbols interpretation";

	var exampleModel = new LsystemExampleViewModel() {
		LsystemProcessor = Model.SimpleLsystemProcessor,
		UnimportantLines = new int[] { 1, -2, -1 },
		SourceCodeTemplate = string.Join(Environment.NewLine,
			"lsystem {0} {{",
			"set symbols axiom = {1};",
			"{2}",
			"}}",
			"process all with InterpretationDebugger;")
	};

	var processConfig = Model.StdLib.ProcessConfigurations["SvgRenderer"];
}

<h2>Symbols interpretation</h2>

<p>
	Next important feature after @Html.ActionLink("rewriting", MVC.Help.Home.BasicRewriting()) is interpretation of symbols.
	Every symbol can be associated with some action.
	The set of actions you can use is given by interpreter component in used process configuration.
</p>

<div id="toc"></div>

<h3>Turtle interpreter</h3>

<p>
	Turtle Interpreter interprets symbols as basic commands for virtual "pen" on 2D canvas (or in 3D space).
	Virtual pen is often called "turtle" (from LOGO where cybernetic turtle was controlled to draw on canvas).
	Pen can move or draw forward, change direction, color or other attributes.
	Interpreter can also save or load its state which allows branching.
	The basic elements like line, circle or polygon can be rendered by renderer, more complex shapes have to be drawn using these.
	Following list shows all actions of Turtle interpreter (withdrawn from
		<a href="@Url.Action(MVC.Help.Predefined.Components())#@Model.Interpreter.ComponentType.FullName">components list</a>).
</p>

<ul>
@foreach (var intMethod in Model.Interpreter.InterpretationMethods) {
	<li>
		<p><span class="monospace">@string.Join(", ", intMethod.Names)</span> — @intMethod.SummaryDoc</p>
	</li>
}
</ul>


<h3>Basic interpretation syntax</h3>

<p>
	Interpret action can be associated to symbol by following syntax: <code class="malsys">interpret <i>symbol</i> as <i>action</i>;</code>.
	All arguments from symbol are sent to interpret action.
	Symbols with no defined action are ignored in interpretation.
	For example symbols <code>F(1, 2) G(3)</code> with interpretation definition <code class="malsys">interpret F as DrawForward;</code>
		will interpret as <code>DrawForward(1, 2)</code>.
</p>

@Html.Partial(MVC.Help.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"InterpretationExample", "F(1, 2) G(3)", "interpret F as DrawForward;"))


<p>
	There can be specified more than one symbol to interpret with single action using syntax:
		<code class="malsys">interpret <i>symbol1 symbol2 symbol3</i> … as <i>action</i>;</code>.
	For example symbols <code>C A B</code> with interpretation definition <code class="malsys">interpret A B C as DrawForward;</code>
		will interpret as <code>DrawForward DrawForward DrawForward</code>.
</p>

@Html.Partial(MVC.Help.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"InterpretationExample", "C A B", "interpret C A B as DrawForward;"))


<h4>Default parameters of action</h4>

<p>
	Default parameters of interpretation action can be specified by following syntax: <code class="malsys">interpret symbol as action(x, y, …);</code>
		where <code>x</code> and <code>y</code> are expressions.
	Arguments from symbol have greater priority than default parameters.
	For example symbols <code>F F(5) F(5, 5)</code> with interpretation definition <code class="malsys">interpret F as DrawForward(0, 1 + 1);</code>
		will interpret as <code>DrawForward(0, 2) DrawForward(5, 2) DrawForward(5, 5)</code>.
</p>

@Html.Partial(MVC.Help.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"InterpretationExample", "F F(5) F(5, 5)", "interpret F as DrawForward(0, 1 + 1);"))


<h4>More features</h4>

<p>
	Full reference for symbol interpretation definition can be found on @Html.ActionLink("syntax reference page", MVC.Help.SyntaxReference.SymbolInterpretation()).
</p>




<h3>Rendering image</h3>

<p>
	Rendered component accepts drawing requests from interpret and actually draws them.
	The basic interpreter is 2D @Html.Link("SVG", "http://en.wikipedia.org/wiki/Scalable_Vector_Graphics") renderer which renders vector images to 2D canvas.
	Renderer is specified by process configuration.
	There are some predefined configurations which are very simple to use.
	If you want to render L-system with SVG renderer, just add <code class="malsys">process all with SvgRenderer;</code> clause to end of input file (in global scope, not in L-system).
	This statement will render all defined L-systems with <code>SvgRenderer</code>.
	TODO: add link to configurations list
</p>


<h3>Example</h3>

<p>
	Many examples can be found in @Html.ActionLink("L-systems gallery", MVC.Gallery.Index()) but one little example follows.
</p>

<pre class="malsys box">
lsystem Plant {

	set axiom = X;
	let initialAngle = 90;
	let iterations = 7;

	interpret F as DrawForward(3);
	interpret + as TurnLeft(20);
	interpret - as TurnLeft(-20);
	interpret [ as StartBranch;
	interpret ] as EndBranch;

	rewrite X to F [ + X ] F [ - X ] + X;
	rewrite F to F F;

	process with SvgRenderer;

}
</pre>
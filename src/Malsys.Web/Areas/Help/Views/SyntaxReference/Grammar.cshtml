@{
	ViewBag.Title = "Formal grammar";
}


<h2>Formal grammar</h2>

<p>
	@Html.ActionLink("Malsys syntax", MVC.Help.SyntaxReference.Index()) is described using formal grammar rules.
	Instead of describing what exactly formal grammar is (you can read it on @Html.Link("wiki", "http://en.wikipedia.org/wiki/Formal_grammar")),
		this page will explain grammar rules on examples.
</p>

<h3>Syntax of grammar rules</h3>

<p>
	Each grammar rule describes one part of Malsys input, name of rule is often connected with its actual semantic meaning.
	The simplest form of rule is <code class="grammar">name = regular_expression</code>.
	The <code class="grammar">name</code> is name of the rule and with @Html.ActionLink("regular expression", MVC.Help.SyntaxReference.GrammarRegexps())
		<code class="grammar">regular_expression</code> is described what is should match.
	It is just named regular expression.
	Rule can match more different regular using boolean operator <i>OR</i> represented as vertical bar <code class="grammar">|</code>.
</p>

<pre class="grammar">
simple = regular_expression

more_regexps =
	| regular_expression_1
	| regular_expression_2
	| regular_expression_3
	| regular_expression_4
</pre>


<h3>Tokens</h3>

<p>
	A token is a string of characters described by one or more @Html.ActionLink("regular expressions", MVC.Help.SyntaxReference.GrammarRegexps()).
	Token names are upper-case to separate them from grammar rule names.
	The following example is token for number literal which is taken from actual @Html.ActionLink("Malsys syntax", MVC.Help.SyntaxReference.Index()).
	Please note that in token can not be any whitespace character, tokens are atomic.
</p>

<pre class="grammar">
NUMBER =
	| [0-9]+ ('.' [0-9]+)? ([eE] ('+'|'-')? [0-9]+)?
	| '0'[bB] [01]+
	| '0'[oO] [0-7]+
	| '0'[xX] ([0-9] | [a-f] | [A-F])+
	| '#' ([0-9] | [a-f] | [A-F])+
</pre>

<p>
	As we can see, number literal is described by 5 different regular expressions.
	Each is matching different form of number:
</p>

<ol>
	<li>Floating point number e.g. <code class="match">3.14159</code> or <code class="match">114e-5</code></li>
	<li>Number in binary base e.g. <code class="match">0b1001011</code></li>
	<li>Number in octal base e.g. <code class="match">0o776</code></li>
	<li>Number in hexadecimal base e.g. <code class="match">0xf80</code></li>
	<li>Number in hexadecimal base e.g. <code class="match">#FFBF00</code></li>
</ol>


<h3>Grammar rules</h3>

<p>
	Malsys grammar rules are described by same syntax as tokens, but members in regular expressions can be only grammar rules or tokens.
	Primitive literals like <code class="grammar">','</code> are directly in the grammar to improve readability,
		there is no special token rule for them.
	As an example can be list of numbers.
</p>

<pre class="grammar">
num_list = NUMBER (',' NUMBER)*
</pre>

<p>
	Rule <code class="grammar">num_list</code> matches <code class="match">1</code>,
		<code class="match">8,6,4,5</code> or <code class="match">1.1,2.2,3e3</code>.
</p>

<h3>Whitespaces in grammar rules</h3>

<p>
	Malsys syntax is whitespace-independent, whitespaces can be implicitly between any tokens.
	So grammar rule <code class="grammar">num_list</code> from previous example also matches <code class="match">42 , 1.1 , 5</code>.
	However sometimes is explicit whitespace needed for separate individual tokens.
</p>

@**
 * Copyright © 2012 Marek Fišer [malsys@marekfiser.cz]
 * All rights reserved.
 *@
@model Malsys.Web.Models.Lsystem.SimpleLsystemProcessor

@{
	const string title = "Basic principles of symbol rewriting system of L-systems";
	const string disqusId = "BasicRewriting";  // Do not chage!!
	
	ViewBag.Title = title;

	var layoutMgr = new LayoutManager();
	SectionsManager sectionsManager = null;// SectionsManager.CreateForLocal();
	var rootSec = sectionsManager.RootSection;

	
	var exampleModel = new LsystemExampleViewModel() {
		LsystemProcessor = Model,
		UnimportantLines = new int[] { -1 },
		SourceCodeTemplate = StringHelper.JoinLines(
			"lsystem {0} {{",
			"set symbols axiom = {1};",
			"set iterations = {2};",
			"{3}",
			"}}",
			"process all with SymbolPrinter;")
	};
}

<h1>@title</h1>




@*<h3>More complex example</h3>

<p>
	In following L-system is hidden the @Html.Link("Fibonacci sequence", "http://en.wikipedia.org/wiki/Fibonacci_sequence").
</p>

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"Fibonacci", "A", "6", StringHelper.JoinLines(
			"set interpretEveryIteration = true;",
			"rewrite A to B;",
			"rewrite B to A B;")))

<p>
	Let's count number of symbols in each iteration (starting with the axiom).
	1, 1, 2, 3, 5, 8, 13.
	Yes, these numbers are Fibonacci sequence.
	This L-system have many interesting properties, for example suffix of any iteration is the previous one.
	But let's move on some more complex topics.
</p>
*@



@*
<h3>Context rewriting</h3>

<p>
	Quite advanced feature is context rewriting.
	The way how rewrite rule is matched on symbol can be restricted with context (symbols directly before and after).
	Context specification in the rewrite rule is placed in braces on the appropriate (left or right) side of rewrite rule's pattern symbol.
	If we want to rewrite <code>A</code> to <code>B</code> only if the left neighbor of
		<code>A</code> is <code>B</code>, we can write: <code class="malsys">rewrite {B} A to B;</code>.
	As an example will be signal propagation through a string of symbols.
</p>

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"SignalPropagation", "B A A A A", "5", StringHelper.JoinLines(
			"set interpretEveryIteration = true;",
			"rewrite {B} A to B;",
			"rewrite B to A;")))

<p>
	With context rewrite rules can be simulated switching two neighbor symbols.
	Imagine situation that we need rewrite rule <code class="malsys">rewrite X Y to Y X;</code>
		or <code class="malsys">rewrite Y X to X Y;</code> which are unfortunately not legal in Malsys
		(it is not possible to rewrite more than one symbol with rewrite rule).
	But we can simulate this behavior with context rewrite rules.
</p>

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"Transpose", "A  X Y  B", "3", StringHelper.JoinLines(
			"set interpretEveryIteration = true;",
			"rewrite {X} Y to X;", "rewrite X {Y} to Y;", "",
			"rewrite Y {X} to X;", "rewrite {Y} X to Y;")))

<p>
	It is also possible to simulate rewriting two symbols at once.
	Following L-system is simulating rewrite rule <code class="malsys">rewrite A B to C D E;</code> which is not legal rewrite rule of Malsys.
</p>

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"TwoAtOnce", "A  A B  B  A B  A", "1", StringHelper.JoinLines(
			"rewrite A {B} to C D E;",
			"rewrite {A} B to nothing;")))


<h3>Rewriting is parallel (concurrent)</h3>

<p>
	Another feature of L-system rewriting rules is that all symbols are rewritten <i>at once</i> (concurrently).
	You may noticed this behavior in previous examples.
</p>

<p>
	If rewriting were not parallel, lets examine one iteration of <code class="malsys">SignalPropagation</code> L-system.
	Axiom is <code>B A A A A</code>.
	The only rewrite rule matching first symbol is <code class="malsys">rewrite B to A</code>, after application this
		rewrite rule we have <code>A A A A A</code>.
	Second, third, fourth and fifth symbol do not match any rewrite rule,
		so our result is <code>A A A A A</code>.
	What is wrong?
	We have to decide which rewrite rule to use on each symbol and then apply them at once.
	Or alternatively do rewrite rule matching and context checking on old axiom.
</p>



<h3>More rewriting features</h3>

<p>
	Full list of rewriting features can be found on @Html.ActionLink("rewrite rules reference page", MVC.Documentation.SyntaxReference.RewriteRule()).
</p>*@

<h2>Comments</h2>
@layoutMgr.StartParent()
@*StaticHtml.DisqusComments(title, disqusId, Url.ActionAbsolute)*@

@layoutMgr.EndParent()

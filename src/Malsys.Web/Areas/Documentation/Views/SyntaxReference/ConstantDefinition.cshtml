@**
 * Copyright © 2012 Marek Fišer [malsys@marekfiser.cz]
 * All rights reserved.
 *@
@model Malsys.Web.Models.Lsystem.SimpleLsystemProcessor

@{
	ViewBag.Title = "Constant definition";
	var exampleModel = new LsystemExampleViewModel() {
		LsystemProcessor = Model,
		SourceCodeTemplate = string.Join(Environment.NewLine,
			"// constant definition example {0:00}",
			"{1}")
	};
	int exampleId = 1;
}

<h1>Constant definition</h1>


@* ================================================================================================================== *@
<h2>Basic definitions</h2>

<div class="grid-100 mobile-grid-100 grid-parent">
	<div class="grid-50 mobile-grid-100">
<p>
	Constant is defined by keyword <code class="malsys">let</code> followed by its name.
	Then follows equals sign <code>=</code> and its value which can be any expression.
	At the end of constant definition is semicolon <code>;</code>.
	In value expression is possible to use earlier defined constants, functions, operators etc.
	You can look at list of predefined @Html.ActionLink("constants", MVC.Documentation.Predefined.Constants()),
		@Html.ActionLink("functions", MVC.Documentation.Predefined.Functions()) and @Html.ActionLink("operators", MVC.Documentation.Predefined.Operators()).
	It is also possible to define new function, details about that are on @Html.ActionLink("function definition page", MVC.Documentation.SyntaxReference.FunctionDefinition()).
</p>
	</div>
</div>

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(exampleId++, StringHelper.JoinLines(
		"let a = 3;",
		"let b = (2 + 2) * 2 ^ 2;",
		"let c = sqrt(a * b);",
		"let a = 0;",
		"process Constants with ConstantDumper;")))


@* ================================================================================================================== *@
<h2>Global and local scope</h2>

<div class="grid-100 mobile-grid-100 grid-parent">
	<div class="grid-50 mobile-grid-100">
<p>
	Constants can be defined in global scope or in local scope of some L-system.
</p>
	</div>
</div>

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(exampleId++, StringHelper.JoinLines(
		"let glob = 8;",
		"lsystem Lsystem {",
			"let loc = 7;",
			"set symbols axiom = A(glob) B(loc);",
		"}",
		"process all with SymbolPrinter;")))

<div class="grid-100 mobile-grid-100 grid-parent">
	<div class="grid-50 mobile-grid-100">
<p>
	Constants defined in local scope overlays constants from global scope, but they do not affect them.
</p>
	</div>
</div>

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(exampleId++, StringHelper.JoinLines(
		"let x = 8;",
		"lsystem LsystemA {",
			"let x = 0;  // x is 0 only in this L-system",
			"set symbols axiom = A(x);",
		"}",
		"lsystem LsystemB {",
			"// x is 8 here",
			"set symbols axiom = B(x);",
		"}",
		"process all with SymbolPrinter;")))


@* ================================================================================================================== *@
<h2>Inheritance of constants</h2>

<div class="grid-100 mobile-grid-100 grid-parent">
	<div class="grid-50 mobile-grid-100">
<p>
	Inheritance of constants works as expected.
	Constants from derived L-systems are defined and new constants can redefine them.
</p>
	</div>
</div>

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(exampleId++, StringHelper.JoinLines(
		"abstract lsystem Base {",
			"let a = 1;",
			"let b = 2;",
		"}",
		"lsystem Derived extends Base {",
			"let a = 3;",
			"set symbols axiom = A(a) B(b);",
		"}",
		"process all with SymbolPrinter;")))


@* ================================================================================================================== *@
<h2>Formal grammar</h2>

<div class="grid-100 mobile-grid-100 grid-parent">
	<div class="grid-50 mobile-grid-100">
<p>
	Defines constant with name represented by token <code>ID</code> as value of <code>expression</code>.
	If constant with same name already exists, it is redefined by new definition.
</p>
	</div>
</div>

@(new CodeListingsManager().CodeNoFigure(ProgLang.Grammar, @"
constant_def = 'let' ID '=' expression ';'
", shadow: true))




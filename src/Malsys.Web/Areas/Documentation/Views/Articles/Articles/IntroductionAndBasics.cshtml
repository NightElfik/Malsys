@model HelpArticleViewModel

@{
	var layoutMgr = Model.LayoutManager;


	var rootSec = Model.SectionsManager.RootSection;

	var secIntroduction = rootSec.Subsection("Introduction");

	var secRewriting = rootSec.Subsection("Rewriting");
		var secRwSimple = secRewriting.Subsection("Simple rewrite rule");
		var secRwParallel = secRewriting.Subsection("Rewriting is parallel");
		var secRwOrderMatters = secRewriting.Subsection("Order of rewrite rules matters");
		var secRwOnlyOne = secRewriting.Subsection("Only one symbol can be rewritten by rewrite rule at once");
		var secRwNext = secRewriting.Subsection("Next steps");

	var secInterpretation = rootSec.Subsection("Interpretation");
		var secIntTurtle = secInterpretation.Subsection("Turtle graphics interpratation");

}


@* ================================================================================================================== *@
@* ================================================================================================================== *@
@* ================================================================================================================== *@
@if (secIntroduction.IsVisible) {
	@secIntroduction.Html

}


@* ================================================================================================================== *@
@* ================================================================================================================== *@
@* ================================================================================================================== *@
@if (secRewriting.IsVisible) {
	@secRewriting.Html

	var exampleModel = new LsystemExampleViewModel() {
		LsystemProcessor = Model.LsystemProcessor,
		UnimportantLines = new int[] { -1 },
		SourceCodeTemplate = StringHelper.JoinLines(
			"lsystem {0} {{",
			"set symbols axiom = {1};",
			"set iterations = {2};",
			"{3}",
			"}}",
			"process all with SymbolPrinter;")
	};

@layoutMgr.StartColumn()
	<p>
		In the simplest form an L-system is a set of rewrite rules and a list of initial symbols (often called an axiom).
		In every iteration the axiom is rewritten by a set of rewrite rules to another list of symbols,
			which is used as an axiom in the next iteration.
		This iterative proces repeats until desired number of iterations is reached.
	</p>
	@layoutMgr.NextColumn()
	<p>
		A symbol in Malsys is represented as a string of characters but it is often jsut a single character.
		Individual symbols are separated by whitespace characters.
	</p>
	<p>
		This chapter covers absolute basics of rewrite rule mechanics of L-systems.
		Following chapter covers how symbols can be interpreted as graphical elements to draw simple fractals.
	</p>
@layoutMgr.EndColumn()


@* ================================================================================================================== *@
@secRwSimple.Html

@layoutMgr.StartColumn()
	<p>
		Let's define very simple L-system called <code>MyFirstLsystem</code> that will generate a sequence of symbols <code>S</code>.
		This can be done by defining some special symbol, in this case symbol <code>A</code>, that will be used to clone new symbols <code>S</code>.
	</p>
	<p>
		Now, the cloning itself is done by rewrite rule that rewrites the symbol <code>A</code> to two symbols <code>S</code> and <code>A</code>.
		Notice that symbol <code>A</code> is preserved and new symbol <code>S</code> appeared.
		Other symbols <code>S</code> in the string remains untouched since there are no rewrite rule for them.
		By setting number of iterations equal to <code>5</code> the code will generate 5 symbols <code>S</code> followed by symbol <code>A</code>.
	</p>
@layoutMgr.EndColumn()

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"MyFirstLsystem", "A", "5", "rewrite A to S A;"))


@layoutMgr.StartColumn()
	<p>
		It is very simple to print result of every iteration by setting property <code>interpretEveryIteration</code> to <code>true</code> as demonstrated in next example.
	</p>
@layoutMgr.EndColumn()

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"MyFirstLsystem", "A", "5", StringHelper.JoinLines(
			"set interpretEveryIteration = true;",
			"rewrite A to B A;")))


@* ================================================================================================================== *@
@secRwParallel.Html

@layoutMgr.StartColumn()
	<p>
		It is possible to define any number of rewrite rules in the L-system.
		Their application is "parallel" as if all symbols were rewritten at the same time.
		This simply means that symbols that are result from one rule wont be rewriten again in the same iteration.
	</p>
@layoutMgr.EndColumn()

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"OrderOfRulesMatters1", "X I X I X", "5", StringHelper.JoinLines(
			"set interpretEveryIteration = true;",
				"rewrite X to I;", "rewrite I to X;")))


@* ================================================================================================================== *@
@secRwOrderMatters.Html

@layoutMgr.StartColumn()
	<p>
		Only one rule can be applied to a particular symbol.
		A search for rewrite rule goes from top to bottom and ends after the first match.
		This means that the order of rewrite rules in an L-system definition is significant.
		Compare following two L-systems, the only difference is order of rewrite rules.
		Quite obviously the results differ.
	</p>
@layoutMgr.EndColumn()

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"OrderOfRulesMatters1", "A", "5", StringHelper.JoinLines("rewrite A to B A;", "rewrite A to C A;")))

<br />

@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"OrderOfRulesMatters2", "A", "5", StringHelper.JoinLines( "rewrite A to C A;", "rewrite A to B A;")))


@* ================================================================================================================== *@
@secRwOnlyOne.Html

@layoutMgr.StartColumn()
	<p>
		It is not possible to create rewrite rule that rewrite groups of symbols at once.
		For example, it is not possible to rewrite symbols <code>A B</code> to <code>B A</code> using one rewrite rule.
		Every rewrite rule can rewrite only one symbol to any number symbols (including zero).
		However, rewriting two (or more) symbols "at once" can be achieved with more context rewrite rules L-systems.
		This is more advanced technique that is discussed in ??.
	</p>
@layoutMgr.EndColumn()


@* ================================================================================================================== *@
@secRwNext.Html

@layoutMgr.StartColumn()
	<p>
		This chapter is intentionally very short and coveres the very basics because rewriting bare symbols is not very fun.
		Following chapter coveres how symbols can be interpreted as basic geometric primitives such as lines to draw some simple fractals — that's fun.
	</p>
@layoutMgr.EndColumn()

}


@* ================================================================================================================== *@
@* ================================================================================================================== *@
@* ================================================================================================================== *@
@if (secInterpretation.IsVisible) {
	@secInterpretation.Html

	var turtleInterpreter = Model.ProcessManager.ComponentResolver.ResolveComponentMetadata("TurtleInterpreter");

@layoutMgr.StartColumn()
	<p>
		Previous chapter described how to produce symbols and this chapter shows how to use them to draw some cool stuff!
		Every symbol can be associated with some action.
		The set of available actions is given by a processor that is specified by <code>process</code> keyword.
		For example, all examples in previous chapter were using <code>SymbolPrinter</code> processor that has no actions, it just prints the symbols as text.
	</p>
@layoutMgr.EndColumn()

@* ================================================================================================================== *@
@secIntTurtle.Html

@layoutMgr.StartColumn()
	<p>
		The simplest interpretation of L-system symbols is using @StaticHtml.WikiLink("Turtle graphics").
		Turtle graphics interprets symbols as basic commands for virtual pen on 2D canvas (or evein in 3D space).
		Virtual pen was explained for kids as a turtle walking on a beach drawing to sand with its tail.
		The pen can move or draw forward, change direction, color or other attributes.
		It is also possible save or load a state of the pen (using stack data structure).
		Following list shows all actions of Turtle interpreter (withdrawn from
			<a href="@Url.Action(MVC.Documentation.Predefined.Components())#@turtleInterpreter.ComponentType.FullName">components list</a>).
	</p>
@layoutMgr.EndColumn()

	var iMethods = turtleInterpreter.InterpretationMethods.ToList();

@layoutMgr.StartColumn()
	<ul>
	@for (int i = 0; i < iMethods.Count / 2; ++i) {
		var im = iMethods[i];
		<li>
			<p><code>@string.Join(", ", im.Names)</code> — @im.SummaryDoc</p>
		</li>
	}
	</ul>
	@layoutMgr.NextColumn()
	<ul>
	@for (int i = iMethods.Count / 2; i < iMethods.Count; ++i) {
		var im = iMethods[i];
		<li>
			<p><code>@string.Join(", ", im.Names)</code> — @im.SummaryDoc</p>
		</li>
	}
	</ul>
@layoutMgr.EndColumn()

@layoutMgr.StartColumn()
	<p>
		Without any further theory let's draw the first fractal using L-systems.
		Let's start with simple Koch curve.
		The syntax is hopefully quite self-explanatory for now and will be explained in more detail shortly.
	</p>
@layoutMgr.EndColumn()

	var exampleModel = new LsystemExampleViewModel() {
		LsystemProcessor = Model.LsystemProcessor,
		UnimportantLines = new int[] { },
		SourceCodeTemplate = string.Join(Environment.NewLine,
			"lsystem {0} {{",
			"set symbols axiom = {1};",
			"set iterations = {2};{3}",
			"",
			"{4}",
			"",
			"{5}",
			"}}",
			"process all with SvgRenderer;")
	};

	@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"KochCurve", "F", "3", "",
		"interpret F as DrawForward(20); interpret + as TurnLeft(60); interpret - as TurnLeft(-60);",
		"rewrite F to F + F - - F + F;"))

@layoutMgr.StartColumn()
	<p>
		Cool, right?
		Let's dig into details of the Koch curve L-systems a little bit.
		To see what is happening we can visualize every iteration by setting property
			<code>interpretEveryIteration</code> to <code>true</code>.
		As you can see, koch curve starts as a single line represented by symbol <code>F</code> and this symbol
			is rewritten to a sequence <code>F + F - - F + F</code>.
		If you dont understand what the <code>F + F - - F + F</code> sequence represents just grab a piece of paper
			with pencil and try to draw it.
		Symbol <code>F</code> means draw a line segment and symbolse <code>+</code> and <code>-</code> represents
			60 degrees turn left or right respectively.
		Every line segment gets replaced by a line with a triangle in the middle.
	</p>
@layoutMgr.EndColumn()

	@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"KochCurve", "F", "3",
		"\nset interpretEveryIteration = true;",
		"interpret F as DrawForward(20); interpret + as TurnLeft(60); interpret - as TurnLeft(-60);",
		"rewrite F to F + F - - F + F;"))

@layoutMgr.StartColumn()
	<p>
		The example can be improved even further by scaling down the line lengths every iteration so the whole
			image has the same size.
		If you think about the math a little bit, every line of length <code>x</code> gets rewritten to a line
			with a triangle where distance between starting and ending points is <code>3 x</code>.
		We need to make lines three-times shorter every iteration.
		This can be achieved in many ways but the simplest way is to use variable <code>currentIteration</code>
			that represents number of current iteration.
	</p>
@layoutMgr.EndColumn()

	@Html.Partial(MVC.Documentation.Shared.Views.LsystemExamplePartial, exampleModel.WithArgs(
		"KochCurve", "F", "3",
		"\nset interpretEveryIteration = true;",
		"interpret F as DrawForward(300 * 3 ^ -currentIteration); interpret + as TurnLeft(60); interpret - as TurnLeft(-60);",
		"rewrite F to F + F - - F + F;"))


}
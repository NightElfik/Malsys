%{

open System
open Microsoft.FSharp.Text.Parsing

open Malsys
open Malsys.Ast

let parse_error_rich = Some (fun (ctxt: ParseErrorContext<_>) ->
    raise <| ParserException(ctxt))

let toAstPos range =
    new Position(range)

%}

%token <string> ID
%token LET LSYSTEM
%token EQUALS SEMI COMMA QMARK COLON RARROW
%token LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK
%token <float> FLOAT
%token <string> OPERATOR
%token EOF


%start parseLsystemStatements
%type <IInputFileStatement[]> parseLsystemStatements

%%


parseLsystemStatements:
    | LsystemStatementsList
      { ($1 :> ResizeArray<IInputFileStatement>).ToArray() }

LsystemStatementsList:
    |
      { new ResizeArray<IInputFileStatement>() }
    | LsystemStatementsList LsystemStatement
      { $1.Add($2); $1 }

LsystemStatement:
    | VarDef SEMI
      { $1 :> IInputFileStatement }
    | FuncDef
      { $1 :> IInputFileStatement }
    | Lsystem
      { $1 :> IInputFileStatement }


// Empty list OR variable definitions list divided by semicolon (but no semicolon on the end)
VarDefsList:
    |
      { new ResizeArray<VariableDefinition>() }
    | VarDefsListNonEmpty
      { $1 }

// Empty list OR variable definitions list divided by semicolon with extra semicolon on the end
VarDefsListSemi:
    |
      { new ResizeArray<VariableDefinition>() }
    | VarDefsListNonEmpty SEMI
      { $1 }

VarDefsListNonEmpty:
    | VarDef
      { let mutable x = new ResizeArray<VariableDefinition>() in x.Add($1); x }
    | VarDefsListNonEmpty SEMI VarDef
      { $1.Add($3); $1 }

VarDef:
    | LetKw Id EQUALS Value
      { new VariableDefinition($1, $2, $4, toAstPos parseState.ResultRange) }


Value:
    | Expression
      { $1 :> IValue }
    | ValuesArray
      { $1 :> IValue }

ValuesArray:
    | LBRACE ValuesList RBRACE
      { new ValuesArray($2, toAstPos parseState.ResultRange) }

ValuesList:
    |
      { new ResizeArray<IValue>() }
    | ValuesListNonEmpty
      { $1 }

ValuesListNonEmpty:
    | Value
      { let mutable x = new ResizeArray<IValue>() in x.Add($1); x }
    | ValuesListNonEmpty COMMA Value
      { $1.Add($3); $1 }


FuncDef:
    | LetKw Id LPAREN OptParamsList RPAREN LBRACE VarDefsListSemi Expression RBRACE
      { new FunctionDefinition($1, $2, $4, $7, $8, toAstPos parseState.ResultRange) }


OptParamsList:
    |
      { new ResizeArray<OptionalParameter>() }
    | OptParamsListNonEmpty
      { $1 }

OptParamsListNonEmpty:
    | OptParam
      { let mutable x = new ResizeArray<OptionalParameter>() in x.Add($1); x }
    | OptParamsListNonEmpty COMMA OptParam
      { $1.Add($3); $1 }

OptParam:
    | Id
      { new OptionalParameter($1) }
    | Id EQUALS Value
      { new OptionalParameter($1, $3) }


Lsystem:
    | LsysKw Id LBRACE LsysStatementsList RBRACE
      { new Lsystem($1, $2, $4, toAstPos parseState.ResultRange) }
    | LsysKw Id LPAREN OptParamsList RPAREN LBRACE LsysStatementsList RBRACE
      { new Lsystem($1, $2, $4, $7, toAstPos parseState.ResultRange) }

LsysStatementsList:
    |
      { new ResizeArray<ILsystemStatement>() }
    | LsysStatementsList LsysStatement
      { $1.Add($2); $1 }

LsysStatement:
    | VarDef SEMI
      { $1 :> ILsystemStatement }
    | RewriteRule SEMI
      { $1 :> ILsystemStatement }


RewriteRule:
    | MaybeLCtxt SymbolPattern MaybeRCtxt MaybeCondition MaybeProbab RARROW MaybeVarDefs SymbolsWithParamsList
      { new RewriteRule($1, $2, $3, $4, $5, $7, $8, toAstPos parseState.ResultRange) }

MaybeLCtxt:
    |
      { null }
    | LBRACE SymbolsPatternsList RBRACE
      { new RrContext($2, toAstPos parseState.ResultRange) }

MaybeRCtxt:
    |
      { null }
    | LBRACE SymbolsPatternsList RBRACE
      { new RrContext($2, toAstPos parseState.ResultRange) }

MaybeCondition:
    |
      { null }
    | QMARK LBRACE VarDefsListSemi Expression RBRACE
      { new RrCondition($3, $4, toAstPos parseState.ResultRange) }

MaybeProbab:
    |
      { null }
    | COLON LBRACE VarDefsListSemi Expression RBRACE
      { new RrProbability($3, $4, toAstPos parseState.ResultRange) }

MaybeVarDefs:
    |
      { null }
    | LBRACE VarDefsList RBRACE
      { $2 }


SymbolsPatternsList:
    |
      { new ResizeArray<SymbolPattern>() }
    | SymbolsPatternsList SymbolPattern
      { $1.Add($2); $1 }

SymbolPattern:
    | Symbol
      { new SymbolPattern($1, toAstPos parseState.ResultRange) }
    | Symbol LPAREN IdsCommaList RPAREN
      { new SymbolPattern($1, $3, toAstPos parseState.ResultRange) }

SymbolsWithParamsList:
    |
      { new ResizeArray<SymbolWithParams>() }
    | SymbolsWithParamsList SymbolWithParams
      { $1.Add($2); $1 }

SymbolWithParams:
    | Symbol
      { new SymbolWithParams($1, toAstPos parseState.ResultRange) }
    | Symbol LPAREN ValuesList RPAREN
      { new SymbolWithParams($1, $3, toAstPos parseState.ResultRange) }

Symbol:
    | ID
      { new Symbol($1, toAstPos parseState.ResultRange) }
    | OPERATOR
      { new Symbol($1, toAstPos parseState.ResultRange) }


// expression can not be empty
Expression:
    //|
    //  { parseState.RaiseError }
    | ExpressionNonEmpty
      { new Expression($1, toAstPos parseState.ResultRange) }

ExpressionNonEmpty:
    | ExprFirstMember
      { let mutable x = new ResizeArray<IExpressionMember>() in x.Add($1); x }
    | ExpressionNonEmpty ExprMember
      { $1.Add($2); $1 }

ExprMember:
    | ExprFirstMember
      { $1 }
    | ValuesArray
      { $1 :> IExpressionMember }

// expression can not start with array value to aviod conflicts
ExprFirstMember:
    | Float
      { $1 :> IExpressionMember }
    | Id
      { $1 :> IExpressionMember }
    | Operator
      { $1 :> IExpressionMember }
    | ExprIndexer
      { $1 :> IExpressionMember }
    | ExprFunc
      { $1 :> IExpressionMember }
    | ExprParen
      { $1 :> IExpressionMember }


ExprIndexer:
    | LBRACK Expression RBRACK
      { new ExpressionIndexer($2, toAstPos parseState.ResultRange) }

ExprFunc:
    | Id LPAREN ValuesList RPAREN
      { new ExpressionFunction($1, $3, toAstPos parseState.ResultRange) }

ExprParen:
    | LPAREN Expression RPAREN
      { new ExpressionBracketed($2, toAstPos parseState.ResultRange) }


IdsCommaList:
    |
      { new ResizeArray<Identificator>() }
    | IdsCommaListNonEmpty
      { $1 }

IdsCommaListNonEmpty:
    | Id
      { let mutable x = new ResizeArray<Identificator>() in x.Add($1); x }
    | IdsCommaListNonEmpty COMMA Id
      { $1.Add($3); $1 }

Id:
    | ID
      { new Identificator($1, toAstPos parseState.ResultRange) }

LsysKw:
    | LSYSTEM
      { new Keyword(toAstPos parseState.ResultRange) }

LetKw:
    | LET
      { new Keyword(toAstPos parseState.ResultRange) }

Operator:
    | OPERATOR
      { new Operator($1, toAstPos parseState.ResultRange) }

Float:
    | FLOAT
      { new FloatConstant($1, toAstPos parseState.ResultRange) }


//------------------------------------------------------------------------------
// Header of lexer file.
//------------------------------------------------------------------------------

{
module Malsys.Parsing.Lexer

open System
open System.Text
open System.Globalization
open Microsoft.FSharp.Text.Lexing

open MessagesLogger

open Malsys
open Malsys.Ast
open Malsys.Parsing
open Malsys.Parsing.Parser

// for float (double) parsing
let invariantCulture = CultureInfo.InvariantCulture
let floatStyle = NumberStyles.AllowDecimalPoint ||| NumberStyles.AllowExponent

/// Returns actual string from lexbuffer.
let lexeme lexbuf = LexBuffer<_>.LexemeString lexbuf

/// Sets new line information into lexbuf.
let newline (lexbuf : LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine


let logMsg msgType (lexbuf : LexBuffer<_>) args =
    logMessagePos msgType (new Position(lexbuf.StartPos, lexbuf.EndPos)) args;
    ()

/// Adds given string as comment into comments list in args.
let addComment (_, cmtList : ResizeArray<Comment>) sb bPos ePos =
    cmtList.Add(new Comment(sb, new Position(bPos, ePos)));
    ()

/// Appends current string from given lexbuf to given stringbuilder.
let appendToSb lexbuf (sb : StringBuilder) =
    sb.Append(LexBuffer<_>.LexemeString lexbuf) |> ignore

let kw =
    [
        (Keyword.As, AS Keyword.As);
        (Keyword.Component, COMPONENT Keyword.Component);
        (Keyword.Configuration, CONFIGURATION Keyword.Configuration);
        (Keyword.Connect, CONNECT Keyword.Connect);
        (Keyword.Consider, CONSIDER Keyword.Consider);
        (Keyword.Container, CONTAINER Keyword.Container);
        (Keyword.Default, DEFAULT Keyword.Default);
        (Keyword.Fun, FUN Keyword.Fun);
        (Keyword.Interpret, INTERPRET Keyword.Interpret);
        (Keyword.Let, LET Keyword.Let);
        (Keyword.Lsystem, LSYSTEM Keyword.Lsystem);
        (Keyword.Nothing, NOTHING Keyword.Nothing);
        (Keyword.Or, OR Keyword.Or);
        (Keyword.Process, PROCESS Keyword.Process);
        (Keyword.Return, RETURN Keyword.Return);
        (Keyword.Rewrite, REWRITE Keyword.Rewrite);
        (Keyword.Set, SET Keyword.Set);
        (Keyword.This, THIS Keyword.This);
        (Keyword.To, TO Keyword.To);
        (Keyword.Typeof, TYPEOF Keyword.Typeof);
        (Keyword.Use, USE Keyword.Use);
        (Keyword.Weight, WEIGHT Keyword.Weight);
        (Keyword.With, WITH Keyword.With);
        (Keyword.Where, WHERE Keyword.Where);
    ]

let getKwStr (kwEnum, token) =
    let str = EnumHelper.GetStringVal(kwEnum) in
    (str, token)

/// Map of keywords.
let keywords = List.map getKwStr kw |> Map.ofList


let parseInt args lexbuf format =
    let s = if (format = ConstantFormat.HashHexadecimal) then ("0x" + (lexeme lexbuf).Substring(1)) else (lexeme lexbuf) in
    let n = try int64 s |> double with _ -> logMsg ParsserMessageType.FailedParseInt lexbuf [| (lexeme lexbuf) |]; Double.NaN in
    FLOAT (n, format)


}

//------------------------------------------------------------------------------
// Helper lexer definitions.
// More about unicode characters properies at http://en.wikipedia.org/wiki/Unicode_character_property
//------------------------------------------------------------------------------

// Lu - Letter, uppercase
// Ll - Letter, lowercase
// Lt - Letter, titlecase
// Lm - Letter, modifier
// Lo - Letter, other
// Nl - Number, letter
let letter = '\Lu' | '\Ll' | '\Lt' | '\Lm' | '\Lo' | '\Nl'

// Nd - Number, decimal digit
let digit = '\Nd'

let firstOpChar = '!'|'$'|'%'|'&'|'*'|'+'|'\\'|'<'|'>'|'@'|'^'|'|'|'~'|'?'|':'|'-'
let opChar = firstOpChar | '='|'/'
let operator = firstOpChar opChar*
let extraOperators = "==" | '/'

let whitespace = [' ' '\t']
let newline = ('\r' '\n' | '\n' | '\r' )  // Win | Unix | Mac

let floatp = digit+ '.' digit*
let floate = digit+ ('.' digit*)? ['e' 'E'] ['+' '-']? digit+
let float = floatp | floate

let hex = ['0'-'9'] | ['A'-'F'] | ['a'-'f']

// Pc - Punctuation, connector
let connectingChar = '\Pc'

// Mn - Mark, nonspacing
// Mc - Mark, spacing combining
let combiningChar = '\Mn' | '\Mc'

// Cf - Other, format
let formattingChar = '\Cf'

let idFirstChar = letter | '_'
let idChar = letter | connectingChar | combiningChar | formattingChar | digit | ['\'']

let id = idFirstChar idChar*

//------------------------------------------------------------------------------
// Lexer rules.
//------------------------------------------------------------------------------

// args : (MessagesCollection, ResizeArray<CommentRange>)
rule tokenize args = parse
    | whitespace
      { tokenize args lexbuf }

    | newline
      { newline lexbuf;
        tokenize args lexbuf }

    | id
      { match keywords.TryFind(lexeme lexbuf) with
        | Some(token) -> token
        | None -> ID(lexeme lexbuf) }

    | '0' ('b'|'B') (['0'-'1'])+
      { parseInt args lexbuf ConstantFormat.Binary }

    | '0' ('o'|'O') (['0'-'7'])+
      { parseInt args lexbuf ConstantFormat.Octal }

    | digit+
      { parseInt args lexbuf ConstantFormat.Float }

    | '0' ('x'|'X') hex+
      { parseInt args lexbuf ConstantFormat.Hexadecimal }

    // #123 number -> 0x123 -> parse as hex int
    | '#' hex+
      { parseInt args lexbuf ConstantFormat.HashHexadecimal }

    | float
      { let mutable d = 0.0 in
        if Double.TryParse(lexeme lexbuf, floatStyle, invariantCulture, &d) then
            FLOAT (d, ConstantFormat.Float)
        else
            logMsg ParsserMessageType.FailedParseFloat lexbuf [| (lexeme lexbuf) |]
            FLOAT (Double.NaN, ConstantFormat.Float) }

    | "/*"
      { let sb = (new StringBuilder(128)).Append(lexeme lexbuf) in
        multiLineComment args (lexbuf.StartPos) sb 1 lexbuf }

    | "/*/"
      { addComment args (lexeme lexbuf) lexbuf.StartPos lexbuf.EndPos;
        tokenize args lexbuf  }

    | "//"
      { let sb = (new StringBuilder(64)).Append(lexeme lexbuf) in
        singleLineComment args (lexbuf.StartPos) sb lexbuf }

    | ';' { SEMI }
    | '.' { DOT }
    | ',' { COMMA }
    | '(' { LPAREN }
    | ')' { RPAREN }
    | '{' { LBRACE }
    | '}' { RBRACE }
    | '[' { LBRACK (lexeme lexbuf) }
    | ']' { RBRACK (lexeme lexbuf) }
    | '=' { EQUALS }

    | operator | extraOperators
      { OPERATOR (lexeme lexbuf) }

    | eof
      { EOF }

    | _
      { logMsg ParsserMessageType.UnrecognizedInput lexbuf [| (lexeme lexbuf) |]
        tokenize args lexbuf }

// nested mult-line comment
// args : (MessagesCollection, ResizeArray<CommentRange>)
and multiLineComment args bPos sb nest = parse
    | "/*"
      { appendToSb lexbuf sb;
        multiLineComment args bPos sb (nest + 1) lexbuf }

    | "*/"
      { appendToSb lexbuf sb;
        if nest > 1 then
            multiLineComment args bPos sb (nest - 1) lexbuf
        else
            addComment args (sb.ToString()) bPos lexbuf.EndPos;
            tokenize args lexbuf }

    | newline
      { appendToSb lexbuf sb;
        newline lexbuf;
        multiLineComment args bPos sb nest lexbuf }

    | eof
      { addComment args (sb.ToString()) bPos lexbuf.StartPos;
        logMessagePos ParsserMessageType.UnterminatedMultilineComment (new Position(bPos, lexbuf.StartPos)) Array.empty;
        EOF }

    | _
      { appendToSb lexbuf sb;
        multiLineComment args bPos sb nest lexbuf }


and singleLineComment args bPos sb = parse
    | newline
      { addComment args (sb.ToString()) bPos lexbuf.StartPos;
        newline lexbuf;
        tokenize args lexbuf }

    | eof
      { addComment args (sb.ToString()) bPos lexbuf.StartPos;
        EOF }

    | _
      { appendToSb lexbuf sb;
        singleLineComment args bPos sb lexbuf }


//------------------------------------------------------------------------------
// Footer of lexer file.
//------------------------------------------------------------------------------

{

}
